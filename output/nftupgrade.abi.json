{
    "buildInfo": {
        "rustc": {
            "version": "1.86.0",
            "commitHash": "05f9846f893b09a1be1fc8560e33fc3c815cfecb",
            "commitDate": "2025-03-31",
            "channel": "Stable",
            "short": "rustc 1.86.0 (05f9846f8 2025-03-31)"
        },
        "contractCrate": {
            "name": "nftupgrade",
            "version": "0.1.0"
        },
        "framework": {
            "name": "multiversx-sc",
            "version": "0.60.0"
        }
    },
    "name": "NftUpgrade",
    "constructor": {
        "inputs": [],
        "outputs": []
    },
    "upgradeConstructor": {
        "inputs": [],
        "outputs": []
    },
    "endpoints": [
        {
            "docs": [
                "Only for testing purposes in Devnet.",
                "Initialize a Test NFT with level 1 in attributes, plus some more info to match current EMR NFTs.",
                "This will make an NFT similar to the current EMR NFTs."
            ],
            "name": "initialize",
            "mutability": "mutable",
            "payableInTokens": [
                "*"
            ],
            "inputs": [],
            "outputs": []
        },
        {
            "docs": [
                "Allows a user to deposit an NFT into the contract to be able to \"lock\" it and enjoy the benefits.",
                "Only 1 NFT per user can be active at a time."
            ],
            "name": "depositNft",
            "mutability": "mutable",
            "payableInTokens": [
                "*"
            ],
            "inputs": [],
            "outputs": []
        },
        {
            "docs": [
                "Allows a user to iniate the retrieval of an NFT.",
                "This will start the unbonding period.",
                "After the unbonding period, the user can claim their NFT.",
                "While the NFT is in retrieval, it cannot be used for any benefits but the user can deposit a new NFT as active."
            ],
            "name": "retrieveNft",
            "mutability": "mutable",
            "inputs": [],
            "outputs": []
        },
        {
            "docs": [
                "Allows a user to claim their NFT after the unbonding period.",
                "This will transfer the NFT back to the user.",
                "The user must have initiated the retrieval process first.",
                "If the unbonding period is not over, the user cannot claim the NFT."
            ],
            "name": "claimNft",
            "mutability": "mutable",
            "inputs": [],
            "outputs": []
        },
        {
            "docs": [
                "Upgrade an NFT to the same level but with the new attributes.",
                "This will update the NFT attributes to match the current EMR NFTs."
            ],
            "name": "upgradeNft",
            "mutability": "mutable",
            "payableInTokens": [
                "*"
            ],
            "inputs": [],
            "outputs": []
        },
        {
            "docs": [
                "Increase the level of an NFT by 1.",
                "This can only be done by the owner or an allowed address."
            ],
            "name": "increaseLevel",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "user",
                    "type": "Address"
                }
            ],
            "outputs": []
        },
        {
            "docs": [
                "Decrease the level of an NFT by 1.",
                "This can only be done by the owner or an allowed address."
            ],
            "name": "decreaseLevel",
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "user",
                    "type": "Address"
                }
            ],
            "outputs": []
        },
        {
            "name": "getIsScPaused",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "bool"
                }
            ]
        },
        {
            "name": "getAllowedAddresses",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "variadic<Address>",
                    "multi_result": true
                }
            ]
        },
        {
            "name": "getNftOwnerAddress",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "nft_token",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "nft_nonce",
                    "type": "u64"
                }
            ],
            "outputs": [
                {
                    "type": "Address"
                }
            ]
        },
        {
            "name": "getNftFromAddress",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "user",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "UserNft"
                }
            ]
        },
        {
            "name": "getNftRetrieveFromAddress",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "user",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "UserNft"
                }
            ]
        },
        {
            "name": "getUserRetrieveEpoch",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "user",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "u64"
                }
            ]
        },
        {
            "name": "getUnbondingPeriod",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "u64"
                }
            ]
        },
        {
            "name": "getBlockedUsers",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "address",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "bool"
                }
            ]
        },
        {
            "name": "pauseSc",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "resumeSc",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [],
            "outputs": []
        },
        {
            "name": "setLevel",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "address",
                    "type": "Address"
                },
                {
                    "name": "new_level",
                    "type": "u64"
                },
                {
                    "name": "category",
                    "type": "u64"
                }
            ],
            "outputs": []
        },
        {
            "name": "blockUser",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "addresses",
                    "type": "variadic<Address>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "unBlockUser",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "addresses",
                    "type": "variadic<Address>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "addAllowedAddresses",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "addresses",
                    "type": "variadic<Address>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "removeAllowedAddresses",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "addresses",
                    "type": "variadic<Address>",
                    "multi_arg": true
                }
            ],
            "outputs": []
        },
        {
            "name": "setUnbondingPeriod",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "period",
                    "type": "u64"
                }
            ],
            "outputs": []
        },
        {
            "name": "forceNftClaim",
            "onlyOwner": true,
            "mutability": "mutable",
            "inputs": [
                {
                    "name": "token",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "nonce",
                    "type": "u64"
                },
                {
                    "name": "address",
                    "type": "Address"
                }
            ],
            "outputs": []
        },
        {
            "name": "getNftIdentifier",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "TokenIdentifier"
                }
            ]
        },
        {
            "name": "getNftIdentifierInvestors",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "TokenIdentifier"
                }
            ]
        },
        {
            "name": "getNftAttributes",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "token_identifier",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "token_nonce",
                    "type": "u64"
                }
            ],
            "outputs": [
                {
                    "type": "bytes"
                }
            ]
        },
        {
            "name": "getNftUriJson",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "token_identifier",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "token_nonce",
                    "type": "u64"
                }
            ],
            "outputs": [
                {
                    "type": "bytes"
                }
            ]
        },
        {
            "name": "getNftAttributesLevelBeforeUpgrade",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "token_identifier",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "token_nonce",
                    "type": "u64"
                }
            ],
            "outputs": [
                {
                    "type": "bytes"
                }
            ]
        },
        {
            "name": "getNftAttributesLevelAfterUpgrade",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "token_identifier",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "token_nonce",
                    "type": "u64"
                }
            ],
            "outputs": [
                {
                    "type": "bytes"
                }
            ]
        },
        {
            "name": "getNftLevel",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "token_identifier",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "token_nonce",
                    "type": "u64"
                }
            ],
            "outputs": [
                {
                    "type": "bytes"
                }
            ]
        },
        {
            "name": "getNftInfoFromAddress",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "user",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "TokenIdentifier"
                },
                {
                    "type": "u64"
                },
                {
                    "type": "u64"
                }
            ]
        },
        {
            "name": "getNftInRetrieveByAddress",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "user",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "TokenIdentifier"
                },
                {
                    "type": "u64"
                },
                {
                    "type": "u64"
                }
            ]
        },
        {
            "name": "getRemainingUnbondingTime",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "user",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "UserRetrieve"
                }
            ]
        },
        {
            "docs": [
                "Returns:",
                "- User Active NFT (Identifier, Nonce , Level)",
                "- User in Retrieve NFT (Identifier, Nonce, Level)",
                "- Unbonding Time",
                "- Can Claim",
                "",
                "Takes as input the user address."
            ],
            "name": "getUserInfo",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "user",
                    "type": "Address"
                }
            ],
            "outputs": [
                {
                    "type": "TokenIdentifier"
                },
                {
                    "type": "u64"
                },
                {
                    "type": "u64"
                },
                {
                    "type": "TokenIdentifier"
                },
                {
                    "type": "u64"
                },
                {
                    "type": "u64"
                },
                {
                    "type": "u64"
                },
                {
                    "type": "bool"
                }
            ]
        },
        {
            "docs": [
                "Returns:",
                "- User Address",
                "- Is in Retrieve",
                "- Unbonding Time",
                "",
                "Takes as input the token identifier and nonce of the NFT."
            ],
            "name": "getCustomNftInfo",
            "mutability": "readonly",
            "inputs": [
                {
                    "name": "token_identifier",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "token_nonce",
                    "type": "u64"
                }
            ],
            "outputs": [
                {
                    "type": "Address"
                },
                {
                    "type": "bool"
                },
                {
                    "type": "u64"
                }
            ]
        },
        {
            "docs": [
                "Returns all NFTs that are currently deposited in the smart contract.",
                "This includes both the investors' NFTs and the regular NFTs.",
                "It returns a list of tuples containing:",
                "- Token Identifier",
                "- Token Nonce",
                "- Owner Address"
            ],
            "name": "getAllNfts",
            "mutability": "readonly",
            "inputs": [],
            "outputs": [
                {
                    "type": "variadic<multi<TokenIdentifier,u64,Address>>",
                    "multi_result": true
                }
            ]
        }
    ],
    "esdtAttributes": [],
    "hasCallback": false,
    "types": {
        "UserNft": {
            "type": "struct",
            "fields": [
                {
                    "name": "identifier",
                    "type": "TokenIdentifier"
                },
                {
                    "name": "nonce",
                    "type": "u64"
                }
            ]
        },
        "UserRetrieve": {
            "type": "struct",
            "fields": [
                {
                    "name": "counter",
                    "type": "u64"
                },
                {
                    "name": "unlocking",
                    "type": "bool"
                }
            ]
        }
    }
}
