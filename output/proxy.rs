// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct NftUpgradeProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for NftUpgradeProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = NftUpgradeProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        NftUpgradeProxyMethods { wrapped_tx: tx }
    }
}

pub struct NftUpgradeProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> NftUpgradeProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init(
        self,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> NftUpgradeProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade(
        self,
    ) -> TxTypedUpgrade<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_upgrade()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> NftUpgradeProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    /// Initialize a Test NFT with level 1 in attributes, plus some more info to match current EMR NFTs. 
    /// This will make an NFT similar to the current EMR NFTs. 
    pub fn initialize(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("initialize")
            .original_result()
    }

    pub fn deposit_nft(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("depositNft")
            .original_result()
    }

    pub fn retrieve_nft(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("retrieveNft")
            .original_result()
    }

    pub fn claim_nft(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("claimNft")
            .original_result()
    }

    /// Upgrade an NFT to the same level but with more data in attributes. 
    pub fn upgrade_nft(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("upgradeNft")
            .original_result()
    }

    pub fn increase_level<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("increaseLevel")
            .argument(&user)
            .original_result()
    }

    pub fn decrease_level<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("decreaseLevel")
            .argument(&user)
            .original_result()
    }

    pub fn is_sc_paused(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, bool> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getIsScPaused")
            .original_result()
    }

    pub fn allowed_addresses(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAllowedAddresses")
            .original_result()
    }

    pub fn nft_owner_address<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<u64>,
    >(
        self,
        nft_token: Arg0,
        nft_nonce: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedAddress<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftOwnerAddress")
            .argument(&nft_token)
            .argument(&nft_nonce)
            .original_result()
    }

    pub fn nft_from_address<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, UserNft<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftFromAddress")
            .argument(&user)
            .original_result()
    }

    pub fn nft_retrieve_from_address<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, UserNft<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftRetrieveFromAddress")
            .argument(&user)
            .original_result()
    }

    pub fn user_retrieve_epoch<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getUserRetrieveEpoch")
            .argument(&user)
            .original_result()
    }

    pub fn unbonding_period(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getUnbondingPeriod")
            .original_result()
    }

    pub fn blocked_users<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, bool> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getBlockedUsers")
            .argument(&address)
            .original_result()
    }

    pub fn pause_sc(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("pauseSc")
            .original_result()
    }

    pub fn resume_sc(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("resumeSc")
            .original_result()
    }

    pub fn set_level<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<u64>,
        Arg2: ProxyArg<u64>,
    >(
        self,
        address: Arg0,
        new_level: Arg1,
        category: Arg2,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setLevel")
            .argument(&address)
            .argument(&new_level)
            .argument(&category)
            .original_result()
    }

    pub fn block_user<
        Arg0: ProxyArg<MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>>,
    >(
        self,
        addresses: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("blockUser")
            .argument(&addresses)
            .original_result()
    }

    pub fn unblock_user<
        Arg0: ProxyArg<MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>>,
    >(
        self,
        addresses: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("unBlockUser")
            .argument(&addresses)
            .original_result()
    }

    pub fn add_allowed_addresses<
        Arg0: ProxyArg<MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>>,
    >(
        self,
        addresses: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("addAllowedAddresses")
            .argument(&addresses)
            .original_result()
    }

    pub fn remove_allowed_address<
        Arg0: ProxyArg<MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>>,
    >(
        self,
        addresses: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("removeAllowedAddresses")
            .argument(&addresses)
            .original_result()
    }

    pub fn set_unbonding_period<
        Arg0: ProxyArg<u64>,
    >(
        self,
        period: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setUnbondingPeriod")
            .argument(&period)
            .original_result()
    }

    pub fn get_tags(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedBuffer<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getTags")
            .original_result()
    }

    pub fn get_nft_identifier(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, TokenIdentifier<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftIdentifier")
            .original_result()
    }

    pub fn get_nft_identifier_investors(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, TokenIdentifier<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftIdentifierInvestors")
            .original_result()
    }

    pub fn get_nft_attributes<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<u64>,
    >(
        self,
        token_identifier: Arg0,
        token_nonce: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedBuffer<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftAttributes")
            .argument(&token_identifier)
            .argument(&token_nonce)
            .original_result()
    }

    pub fn get_nft_uris<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<u64>,
    >(
        self,
        token_identifier: Arg0,
        token_nonce: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedVec<Env::Api, ManagedBuffer<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftUris")
            .argument(&token_identifier)
            .argument(&token_nonce)
            .original_result()
    }

    pub fn get_nft_uri_json<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<u64>,
    >(
        self,
        token_identifier: Arg0,
        token_nonce: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedBuffer<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftUriJson")
            .argument(&token_identifier)
            .argument(&token_nonce)
            .original_result()
    }

    pub fn get_nft_attributes_level_before_upgrade<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<u64>,
    >(
        self,
        token_identifier: Arg0,
        token_nonce: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedBuffer<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftAttributesLevelBeforeUpgrade")
            .argument(&token_identifier)
            .argument(&token_nonce)
            .original_result()
    }

    pub fn get_nft_attributes_level_after_upgrade<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<u64>,
    >(
        self,
        token_identifier: Arg0,
        token_nonce: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedBuffer<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftAttributesLevelAfterUpgrade")
            .argument(&token_identifier)
            .argument(&token_nonce)
            .original_result()
    }

    pub fn get_nft_level<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<u64>,
    >(
        self,
        token_identifier: Arg0,
        token_nonce: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedBuffer<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftLevel")
            .argument(&token_identifier)
            .argument(&token_nonce)
            .original_result()
    }

    pub fn get_nft_from_address_before<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValue3<TokenIdentifier<Env::Api>, u64, u64>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftInfoBeforeUpgrade")
            .argument(&user)
            .original_result()
    }

    pub fn get_nft_from_address<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValue3<TokenIdentifier<Env::Api>, u64, u64>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftInfoAfterUpgrade")
            .argument(&user)
            .original_result()
    }

    pub fn get_nft_retrieve_from_address<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValue3<TokenIdentifier<Env::Api>, u64, u64>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftInRetrieveByAddress")
            .argument(&user)
            .original_result()
    }

    pub fn get_nft_nonce<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftNonce")
            .argument(&user)
            .original_result()
    }

    pub fn get_nft_level_by_address<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getNftLevelByAddress")
            .argument(&user)
            .original_result()
    }

    /// Boolean is a number -> 01 True , {empty}/"" False 
    pub fn get_remaining_unbonding_time<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, UserRetrieve> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getRemainingUnbondingTime")
            .argument(&user)
            .original_result()
    }

    /// Returns: 
    /// - User Active NFT (Identifier, Nonce , Level) 
    /// - User in Retrieve NFT (Identifier, Nonce, Level) 
    /// - Unbounding Time 
    /// - Can Claim 
    pub fn ger_user_info<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        user: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValue8<TokenIdentifier<Env::Api>, u64, u64, TokenIdentifier<Env::Api>, u64, u64, u64, bool>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getUserInfo")
            .argument(&user)
            .original_result()
    }

    /// Returns: 
    /// - User Address 
    /// - Is in Retrieve 
    /// - Unbounding Time 
    ///  
    /// Takes as input the token identifier and nonce of the NFT. 
    pub fn get_custom_nft_info<
        Arg0: ProxyArg<TokenIdentifier<Env::Api>>,
        Arg1: ProxyArg<u64>,
    >(
        self,
        token_identifier: Arg0,
        token_nonce: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValue3<ManagedAddress<Env::Api>, bool, u64>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getCustomNftInfo")
            .argument(&token_identifier)
            .argument(&token_nonce)
            .original_result()
    }
}

#[type_abi]
#[derive(NestedEncode, NestedDecode, TopEncode, TopDecode, ManagedVecItem, Debug, Clone)]
pub struct UserNft<Api>
where
    Api: ManagedTypeApi,
{
    pub identifier: TokenIdentifier<Api>,
    pub nonce: u64,
}

#[type_abi]
#[derive(NestedEncode, NestedDecode, TopEncode, TopDecode, ManagedVecItem, Debug, Clone)]
pub struct UserRetrieve {
    pub counter: u64,
    pub unlocking: bool,
}
